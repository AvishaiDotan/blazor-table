<td class="@GetTDClass()"
    @onmousedown="onHandleMouseDown"
    oncontextmenu="return false;">

    @switch (type)
    {
        case "checkbox":
            <input type="checkbox" checked="@value" @onchange='(ev) => updateDate("checkbox", ev)' @ref="inputElement" />
            break;
        case "number":
            <input type="number" value="@value" checked="@value" @onchange='(ev) => updateDate("number", ev)' @ref="inputElement" />
            break;
        case "date":
            <input type="date" value="@value" checked="@value" @onchange='(ev) => updateDate("date", ev)' @ref="inputElement" />
            break;
        case "text":
            <input type="text" value="@value" checked="@value" @onchange='(ev) => updateDate("text", ev)' @ref="inputElement">
            break;
        default:
            break;
    }

    @if (isModalOpen)
    {
        <section class="cell-modal" style="top: @topPos; left: @leftPos">
            <span @onclick='() => handleClick("add", rowIdx)'>
                Add record above
            </span>
            <span @onclick='() => handleClick("add", rowIdx + 1)'>
                Add record below
            </span>
        </section>

    }
</td>





@code {
    private ElementReference inputElement;

    string topPos = "0px";
    string leftPos = "0px";

    dynamic value;

    [Parameter] public Action<int, int, int> HandleMouseDown { get; set; }
    [Parameter] public Action<int> addNewRow { get; set; }
    [Parameter] public Action<string, int, dynamic> onDataChanged { get; set; }

    [Parameter] public object innerText { get; set; }
    [Parameter] public int rowIdx { get; set; }
    [Parameter] public int columnIdx { get; set; }
    [Parameter] public bool isModalOpen { get; set; }
    [Parameter] public bool isFocused { get; set; }
    [Parameter] public bool isEdited { get; set; }
    [Parameter] public string type { get; set; }

    protected override void OnParametersSet()
    {
        convertTo();
        if (isEdited) setFocus("input");
    }

    private async Task setFocus(string type)
    {
        await inputElement.FocusAsync();

    }


    public void onHandleMouseDown(MouseEventArgs e)
    {
        if (e.Button == 2)
        {
            topPos = $"{e.OffsetY}px";
            leftPos = $"{e.OffsetX}px";
            HandleMouseDown.Invoke(2, rowIdx, columnIdx);
        }
        else if (e.Button == 0)
        {
            HandleMouseDown.Invoke(0, rowIdx, columnIdx);
        }

    }

    public void handleClick(string type, int idx)
    {
        addNewRow.Invoke(idx);
    }



    public void convertTo()
    {
        switch (type)
        {
            case "checkbox":
                value = bool.Parse(innerText.ToString());
                break;
            case "number":
                value = int.Parse(innerText.ToString());
                break;
            case "date":
                value = new DateTime(1970, 1, 1).AddSeconds(double.Parse(innerText.ToString())).ToString("yyyy-MM-dd");
                break;
            case "text":
                value = innerText.ToString();
                break;
        }
    }

    public void updateDate(string key, ChangeEventArgs e)
    {
        onDataChanged.Invoke(key, rowIdx, e.Value);
    }

    string GetTDClass()
    {
        string tdClass = "table-cell";
        if (isEdited) tdClass += " edited";
        else if (isFocused) tdClass += " focused";

        return tdClass;
    }
}
