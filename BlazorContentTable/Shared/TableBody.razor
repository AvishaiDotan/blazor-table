<tbody>

    @for (int rowIdx = 0; rowIdx < TableBodyData.Count; rowIdx++)
    {
        var row = TableBodyData[rowIdx];
        <tr>
            @for (int columnIdx = 0; columnIdx < headers.Count; columnIdx++)
            {
                var header = headers[columnIdx];
                @if (row.ContainsKey(header))
                {
                    <TableCell innerText="@row[header]"
                       rowIdx="rowIdx"
                       columnIdx="columnIdx"
                       HandleTableClick="(which, rowIdx, columnIdx) => HandleTableClick.Invoke(which, rowIdx, columnIdx)"
                       isModalOpen='isState("open", rowIdx, columnIdx)'
                       isFocusedCell='isState("focused", rowIdx, columnIdx)'
                       addNewRow="(rowIdx) => addNewRow.Invoke(rowIdx)"
                       type="@headersData[columnIdx].type"
                   />
                       
                }
                else
                {
                    <TableCell />
                }

            }
        </tr>
    }
    <tr>
        @foreach (var header in headers.Select((item, idx) => new { item, idx }))
        {
            @if (header.idx == 0)
            {
                <td @onclick="() => addNewRow.Invoke(TableBodyData.Count)">
                    <AppSvgs type="plus" />
                </td>
            }
            else
            {
                <td></td>
            }
        }
    </tr>

</tbody>

@code {
    [Parameter]
    public Action<int, int, int> HandleTableClick { get; set; }

    [Parameter]
    public Action<int> addNewRow { get; set; }

    [Parameter]
    public List<Dictionary<string, dynamic>> TableBodyData { get; set; }

    [Parameter]
    public List<string> headers { get; set; }

    [Parameter]
    public (int rowIdx, int columnIdx) selectedCell { get; set; }

    [Parameter]
    public (int rowIdx, int columnIdx) focusedCell { get; set; }

    [Parameter]
    public List<TableHeaderClass> headersData { get; set; }


    public bool isState(string checkedState, int rowIdx, int columnIdx)
    {
        if (checkedState == "open") return (selectedCell.rowIdx == rowIdx && selectedCell.columnIdx == columnIdx);
        if (checkedState == "focused") return (focusedCell.rowIdx == rowIdx && focusedCell.columnIdx == columnIdx);
        return false;
    }

    public List<string> GetHeaders()
    {
        List<string> result = new List<string>();

        foreach (TableHeaderClass header in headersData)
        {
            result.Add(header.value);
        }
        return result;
    }



}