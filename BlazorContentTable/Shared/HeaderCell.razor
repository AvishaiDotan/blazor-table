<th 
    class="@GetTHClass()" 
    @onmousedown="(ev) => handleMouseDown(ev, columnIdx)" 
    @onclick:stopPropagation="true"
    oncontextmenu="return false;"
>
    <div class="cell-wrapper">
        <AppSvgs type="@headerData.type" />
        @if (headerData.value.StartsWith("_"))
        {
            <span></span>
        }
        else
        {
            <span>@headerData.value</span>
        }

    </div>
    @if (isModalOpen)
    {
        <section class="cell-modal" style="top: @topPos; left: @leftPos">
            <span class="@($"{(isStickTop ? "selected" : "")}")"
              @onmouseenter='() => { isStickTop = true; isSideModalOpen = true; }'
              @onmouseleave='() => isSideModalOpen = false'>
                Add Left Column
            </span>

            <span class="@($"{(isStickTop ? "" : "selected")}")"
              @onmouseenter='() => { isStickTop = false; isSideModalOpen = true; }'
              @onmouseleave='() => isSideModalOpen = false'>
                Add Right Column

            </span>

            <section class="@($"{(isStickTop ? "stick-top" : "stick-bottom")} {(isSideModalOpen ? "open" : "closed")} cell-modal side-modal")">
                @foreach (var column in new List<string> { "text", "checkbox", "date", "number" })
                {
                    <span class="add-column-action" @onclick='() => addColumn(column)'>
                        <span>@column</span>
                        <AppSvgs type="@column" />
                    </span>
                }
            </section>
        </section>

    }

</th>

@code {
    string topPos = "0px";
    string leftPos = "0px";

    private bool isStickTop { get; set; } = false;
    private bool isSideModalOpen { get; set; } = false;

    [Parameter]
    public Action<int, string, bool> handleModalChanges { get; set; }

    [Parameter]
    public Action<int, string> addNewColumn { get; set; }

    [Parameter]
    public Action<int, int, int> HandleTableClick { get; set; }

    [Parameter]
    public TableHeaderClass headerData { get; set; }

    [Parameter]
    public int columnIdx { get; set; }

    [Parameter]
    public bool isModalOpen { get; set; }

    [Parameter]
    public bool isFocusedCell { get; set; }



    public void handleMouseDown(MouseEventArgs e, int columnIdx)
    {
        if (e.Button == 2)
        {
            topPos = $"{e.OffsetY}px";
            leftPos = $"{e.OffsetX}px";
            HandleTableClick.Invoke(2, -100, columnIdx);
        } 
        else if (e.Button == 0)
        {
            HandleTableClick.Invoke(0, -100, columnIdx);
        }
    }

    public void addColumn(string type)
    {
        int newCoulmnIdx = (isStickTop) ? columnIdx : columnIdx + 1;
        addNewColumn.Invoke(newCoulmnIdx, type);
    }

    private string GetTHClass()
    {
        string cellClass = "header-cell";

        switch (isModalOpen, isFocusedCell)
        {
            case (true, false):
                cellClass += " selected";
                break;
            case (false, true):
                cellClass += " focused";
                break;
            case (true, true):
                cellClass += " selected focused";
                break;
        }

        return cellClass;
    }

}
