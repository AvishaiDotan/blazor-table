@page "/"
<PageTitle>Index</PageTitle>

@inject HttpClient Http

@if (tableData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <main tabindex="0"
      @onkeydown="HandleKeyDown"
      @ref="mainRef"
      @onclick="(ev) => closeAllModals(true)"
      class="full">
        <AppHeader />
        <TableActions addNewRow="(rowIdx) => addNewRow(rowIdx)" />
        <section class="table-wrapper">
            <table>
                @if (tableData != null)
                {
                    <TableHeader TableHeaderData="tableData.tableHeader"
                         HandleTableClick="(which, idx, columnIdx) => HandleTableClick(which, idx, columnIdx)"
                         addNewColumn="(columnIdx, type) => addNewColumn(columnIdx, type)"
                         selectedCell="selectedCell"
                         focusedCell="focusedCell" />

                    <TableBody TableBodyData="tableData.tableBody"
                       headersData="tableData.tableHeader"
                       headers="GetHeaders()"
                       HandleTableClick="(which, idx, columnIdx) => HandleTableClick(which, idx, columnIdx)"
                       selectedCell="selectedCell"
                       focusedCell="focusedCell"
                       addNewRow="(rowIdx) => addNewRow(rowIdx)"
                       onDataChanged="(header, rowIdx, data) => updateData(header, rowIdx, data)" />
                }
            </table>
            <div class="height-filler">
            </div>
        </section>
    </main>




    @code {

    static TableData tableData;
    private (int rowIdx, int columnIdx) selectedCell;
    private (int rowIdx, int columnIdx) focusedCell;
    private (int rowIdx, int columnIdx) editedCell;

    private ElementReference mainRef { get; set; }


    protected override async Task OnInitializedAsync()
    {
        tableData = await Http.GetFromJsonAsync<TableData>("sample-data/initalData.json");

        selectedCell = (-1, -1);
        focusedCell = editedCell = selectedCell;
        //Console.WriteLine(JsonConvert.SerializeObject(tableData, Formatting.Indented));
        //Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(tableData));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainRef.FocusAsync();
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.ShiftKey && e.Key == "Enter")
        {
            addNewRow(0);
            return;
        }

        int headerRow = -100;
        int firstBodyRow = 0;
        int columnCount = GetHeaders().Count - 1;
        int rowCount = tableData.tableBody.Count - 1;
        bool isAlreadyFocused = (focusedCell.columnIdx != -1 && focusedCell.rowIdx != -1);

        if (isAlreadyFocused)
        {
            if (e.Key == "Enter")
            {

            }

            if (e.Key == "ArrowUp" && focusedCell.rowIdx >= 0)
            {
                focusedCell.rowIdx = (focusedCell.rowIdx == 0) ? headerRow : focusedCell.rowIdx - 1;
            }
            else if (e.Key == "ArrowDown" && focusedCell.rowIdx < rowCount)
            {
                focusedCell.rowIdx = (focusedCell.rowIdx == -100) ? firstBodyRow : focusedCell.rowIdx + 1;
            }
            else if (e.Key == "ArrowLeft" && focusedCell.columnIdx > 0) focusedCell.columnIdx--;
            else if (e.Key == "ArrowRight" && focusedCell.columnIdx < columnCount) focusedCell.columnIdx++;
        }
        else
        {
            if (e.Key == "ArrowUp") focusedCell = (rowCount, 0);
            else if (e.Key == "ArrowDown" || e.Key == "ArrowRight") focusedCell = (-100, 0);
            else if (e.Key == "ArrowLeft") focusedCell = (-100, columnCount);
        }
        selectedCell = (-1, -1);
    }

    public List<string> GetHeaders()
    {
        List<string> result = new List<string>();

        foreach (TableHeaderClass header in tableData.tableHeader)
        {
            result.Add(header.value);
        }
        return result;
    }

    public void closeAllModals(bool doUpdate)
    {
        selectedCell = focusedCell = (-1, -1);

        if (doUpdate)
        {
            StateHasChanged();
        }
    }

    public void HandleTableClick(int which, int rowIdx, int columnIdx)
    {
        focusedCell = (rowIdx, columnIdx);
        selectedCell = (-1, -1);

        if (which == 2)
        {
            selectedCell = focusedCell;
        }

        StateHasChanged();
    }


    public void addNewColumn(int columnIdx, string type)
    {
        closeAllModals(true);

        Console.WriteLine(columnIdx);
        Console.WriteLine(type);

        Random rand = new Random();
        int randomNumber = rand.Next();
        string propName = "_" + randomNumber.ToString();

        TableHeaderClass newHeader = new TableHeaderClass();
        newHeader.type = type;
        newHeader.value = propName;
        tableData.tableHeader.Insert(columnIdx, newHeader);

        dynamic customValue = getCustomValue(type);

        foreach (var item in tableData.tableBody)
        {
            item[propName] = customValue;
        }
    }

    public void addNewRow(int rowIdx)
    {

        var rand = new Random();
        var newRow = new Dictionary<string, dynamic>();

        foreach (var header in tableData.tableHeader)
        {

            newRow["id"] = rand.Next();
            switch (header.type)
            {
                case "text":
                    newRow[header.value] = "_";
                    break;
                case "checkbox":
                    newRow[header.value] = false;
                    break;
                case "date":
                    newRow[header.value] = (long)DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
                    break;
                case "number":
                    newRow[header.value] = -1;
                    break;
                default:
                    newRow[header.value] = null;
                    break;
            }
        }

        tableData.tableBody.Insert(rowIdx, newRow);
        StateHasChanged();
    }

    public dynamic getCustomValue(string type)
    {
        if (type == "text") return "";
        else if (type == "number") return 0;
        else if (type == "checkbox") return false;
        else return 1244249;
    }

    public void updateData(string header, int rowIdx, dynamic data)
    {
        tableData.tableBody[rowIdx][header] = data;
    }
}
}


