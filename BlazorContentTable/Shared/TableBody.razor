<tbody>

    @for (int rowIdx = 0; rowIdx < TableBodyData.Count; rowIdx++)
    {
        var row = TableBodyData[rowIdx];
        <tr>
            @for (int columnIdx = 0; columnIdx < headers.Count; columnIdx++)
            {
                var header = headers[columnIdx];
                @if (row.ContainsKey(header))
                {
                    <TableCell value="@row[header]"
                       rowIdx="rowIdx"
                       columnIdx="columnIdx"
                       header="@header"
                       type="@headersData[columnIdx].type"
                       isModalOpen='isState("open", rowIdx, columnIdx)'
                       isFocused='isState("focused", rowIdx, columnIdx)'
                       isEdited='isState("edit", rowIdx, columnIdx)'
                       HandleMouseDown="(which, rowIdx, columnIdx) => HandleMouseDown.Invoke(which, rowIdx, columnIdx)"
                       applyRowAction="(type, rowIdx) => applyRowAction.Invoke(type, rowIdx)"                    
                       onDataChanged="(header, rowIdx, data) => onDataChanged.Invoke(header, rowIdx, data)" />
                       
                }
                else
                {
                    <TableCell />
                }

            }
        </tr>
    }
    <tr>
        @foreach (var header in headers.Select((item, idx) => new { item, idx }))
        {
            @if (header.idx == 0)
            {
                <td @onclick='() => applyRowAction.Invoke("add", TableBodyData.Count)'>
                    <AppSvgs type="plus" />
                </td>
            }
            else
            {
                <td></td>
            }
        }
    </tr>

</tbody>

@code {
    [Parameter] public Action<string, int, dynamic> onDataChanged { get; set; }
    [Parameter] public Action<int, int, int> HandleMouseDown { get; set; }
    [Parameter] public Action<string, int> applyRowAction { get; set; }

    [Parameter] public List<Dictionary<string, dynamic>> TableBodyData { get; set; }
    [Parameter] public List<string> headers { get; set; }

    [Parameter] public List<TableHeaderClass> headersData { get; set; }

    [Parameter] public (int rowIdx, int columnIdx) cellWithOpenModal { get; set; }
    [Parameter] public (int rowIdx, int columnIdx) focusedCell { get; set; }
    [Parameter] public (int rowIdx, int columnIdx) editedCell { get; set; }

    public bool isState(string checkedState, int rowIdx, int columnIdx)
    {

        if (checkedState == "open") return (cellWithOpenModal.rowIdx == rowIdx && cellWithOpenModal.columnIdx == columnIdx);
        if (checkedState == "focused") return (focusedCell.rowIdx == rowIdx && focusedCell.columnIdx == columnIdx);
        if (checkedState == "edit") return (editedCell.rowIdx == rowIdx && editedCell.columnIdx == columnIdx);
        return false;
    }

    public List<string> GetHeaders()
    {
        List<string> result = new List<string>();

        foreach (TableHeaderClass header in headersData)
        {
            result.Add(header.value);
        }
        return result;
    }



}