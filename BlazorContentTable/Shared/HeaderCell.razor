<th class="header-cell" @onmousedown="(ev) => handleMouseDown(ev, idx)" oncontextmenu="return false;">
    <div class="cell-wrapper">
        <AppSvgs type="@headerData.type"/>
        @if (headerData.value.StartsWith("_"))
        {
            <span></span>
        }
        else
        {
            <span>@headerData.value</span>
        }

    </div>
    @if (headerData.isDirectionModalOpen)
    {
        <section class="cell-modal" style="top: @topPos; left: @leftPos">
            <span class="@($"{(isStickTop ? "selected" : "")}")"
              @onmouseenter='() => { isStickTop = true; isSideModalOpen = true; }'
              @onmouseleave='() => isSideModalOpen = false'>
                Add Left Column
            </span>

            <span class="@($"{(isStickTop ? "" : "selected")}")"
              @onmouseenter='() => { isStickTop = false; isSideModalOpen = true; }'
              @onmouseleave='() => isSideModalOpen = false'>
                Add Right Column

            </span>

            <section class="@($"{(isStickTop ? "stick-top" : "stick-bottom")} {(isSideModalOpen ? "open" : "closed")} cell-modal side-modal")">
                @foreach (var column in new List<string> { "text", "checkbox", "date", "number" })
                {
                    <span class="add-column-action" @onclick='() => addColumn(column)'>
                        <span>@column</span>
                        <AppSvgs type="@column" />
                    </span>
                }
            </section>
        </section>

    }

</th>

@code {
    string topPos = "0px";
    string leftPos = "0px";

    private bool isStickTop { get; set; } = false;
    private bool isSideModalOpen { get; set; } = false;


    [Parameter]
    public TableHeaderClass headerData { get; set; }

    [Parameter]
    public int idx { get; set; }

    [Parameter]
    public Action<int, string, bool> handleModalChanges { get; set; }

    [Parameter]
    public Action<int, string> addNewColumn { get; set; }

    public void handleMouseDown(MouseEventArgs e, int idx)
    {
        if (e.Button != 2) return;

        topPos = $"{e.OffsetY}px";
        leftPos = $"{e.OffsetX}px";
        handleModalChanges.Invoke(idx, "isDirectionModalOpen", true);
    }

    public void addColumn(string type)
    {
        int newCoulmnIdx = (isStickTop) ? idx : idx + 1;
        addNewColumn.Invoke(newCoulmnIdx, type);
    }

}
