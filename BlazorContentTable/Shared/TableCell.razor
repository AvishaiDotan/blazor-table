<td class="@GetTDClass()"
    @onmousedown="onHandleMouseDown"
    oncontextmenu="return false;"
    style="user-select: @(!isEdited ? "none" : "auto");">

    @switch (type)
    {

        case "checkbox":
            <input type="checkbox" disabled="@(!isEdited)" checked="@value" @onchange='(ev) => dataChanged(header, ev)' @ref="inputElement" />
            break;
        case "number":
            <input type="number" disabled="@(!isEdited)" value="@value" @onchange='(ev) => dataChanged(header, ev)' @ref="inputElement" />
            break;
        case "date":
            <input type="date" disabled="@(!isEdited)" value="@value" @onchange='(ev) => dataChanged(header, ev)' @ref="inputElement" />
            break;
        case "text":
            <input type="text" disabled="@(!isEdited)" value="@value" @onchange='(ev) => dataChanged(header, ev)' @ref="inputElement">
            break;
        default:
            break;
    }

    @if (isModalOpen)
    {
        <section class="cell-modal" style="top: @topPos; left: @leftPos">
            <span @onclick='() => handleClick("add", rowIdx)'>
                Add record above
            </span>
            <span @onclick='() => handleClick("add", rowIdx + 1)'>
                Add record below
            </span>
            <span @onclick='() => handleClick("delete", rowIdx)'>
                Delete selected row
            </span>
            <span @onclick='() => handleClick("duplicate", rowIdx)'>
                Duplicate selected row
            </span>
        </section>

    }
</td>





@code {
    private ElementReference inputElement;

    string topPos = "0px";
    string leftPos = "0px";

    [Parameter] public Action<int, int, int> HandleMouseDown { get; set; }
    [Parameter] public Action<string, int> applyRowAction { get; set; }
    [Parameter] public Action<string, int, dynamic> onDataChanged { get; set; }

    [Parameter] public bool isModalOpen { get; set; }
    [Parameter] public bool isFocused { get; set; }
    [Parameter] public bool isEdited { get; set; }

    [Parameter] public dynamic value { get; set; }
    [Parameter] public int rowIdx { get; set; }
    [Parameter] public int columnIdx { get; set; }

    [Parameter] public string type { get; set; }
    [Parameter] public string header { get; set; }

    protected override void OnParametersSet()
    {
        //convertTo(); .GetBoolean()
        Console.WriteLine(value);
        if (isEdited) setFocus("input");
    }

    private async Task setFocus(string type)
    {
        await inputElement.FocusAsync();

    }


    public void onHandleMouseDown(MouseEventArgs e)
    {

        if (e.Button == 2)
        {
            topPos = $"{e.OffsetY}px";
            leftPos = $"{e.OffsetX}px";
            HandleMouseDown.Invoke(2, rowIdx, columnIdx);
        }
        else if (e.Button == 0)
        {
            if (isModalOpen || isEdited) return;
            HandleMouseDown.Invoke(0, rowIdx, columnIdx);
        }

    }

    public void handleClick(string type, int idx)
    {
        applyRowAction.Invoke(type, idx);
    }

    public string modifyDate(dynamic timestamp)
    {
        return new DateTime(1970, 1, 1).AddSeconds(double.Parse(timestamp.ToString())).ToString("yyyy-MM-dd");
    }


    //public void convertTo()
    //{
    //    Console.Writ;eLine(innerText.GetType());
    //    switch (type)
    //    {
    //        case "checkbox":
    //            value = bool.Parse(innerText.ToString());
    //            break;
    //        case "number":
    //            value = int.Parse(innerText.ToString());
    //            break;
    //        case "date":
    //            value = new DateTime(1970, 1, 1).AddSeconds(double.Parse(innerText.ToString())).ToString("yyyy-MM-dd");
    //            break;
    //        case "text":
    //            value = innerText.ToString();
    //            break;
    //    }
    //}

    public void dataChanged(string key, ChangeEventArgs e)
    {
        onDataChanged.Invoke(key, rowIdx, e.Value);
    }

    string GetTDClass()
    {
        string tdClass = "table-cell";
        if (isEdited) tdClass += " edited";
        else if (isFocused) tdClass += " focused";

        return tdClass;
    }
}
