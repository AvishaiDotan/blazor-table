@page "/"
<PageTitle>Index</PageTitle>

@inject HttpClient Http

@if (tableData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <main 
            tabindex="0" 
            @onkeydown="HandleKeyDown" 
            @ref="mainRef"
            @onclick="(ev) => closeAllModals(true)" 
            class="full"
        >
        <AppHeader />
        <TableActions addNewRow="(rowIdx) => addNewRow(rowIdx)" />
        <section class="table-wrapper">
            <table>
                @if (tableData != null)
                {
                    <TableHeader TableHeaderData="tableData.tableHeader"
                         handleModalChanges="(columnIdx, modalType, state) => handleModalChanges(columnIdx, modalType, state)"
                         addNewColumn="(columnIdx, type) => addNewColumn(columnIdx, type)" />

                    <TableBody TableBodyData="tableData.tableBody"
                       headers="GetHeaders()"
                       HandleTableBodyClick="(which, idx, columnIdx) => HandleTableBodyClick(which, idx, columnIdx)"
                       selectedCell="selectedCell"
                       addNewRow="(rowIdx) => addNewRow(rowIdx)"
                       focusedCell="focusedCell" />
                }
            </table>
            <div class="height-filler">
            </div>
        </section>
    </main>




    @code {

    static TableData tableData;
    private (int rowIdx, int columnIdx) selectedCell;
    private (int rowIdx, int columnIdx) focusedCell;

    private ElementReference mainRef { get; set; }


    protected override async Task OnInitializedAsync()
    {
        tableData = await Http.GetFromJsonAsync<TableData>("sample-data/initalData.json");
        selectedCell = (-1, -1);
        focusedCell = selectedCell;
        //Console.WriteLine(JsonConvert.SerializeObject(tableData, Formatting.Indented));
        //Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(tableData));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainRef.FocusAsync();
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.ShiftKey && e.Key == "Enter") addNewRow(0);

        if (focusedCell.columnIdx != -1 && focusedCell.rowIdx != -1)
        {
            if (e.Key == "ArrowUp" && focusedCell.rowIdx > 0) focusedCell.rowIdx--;
            else if (e.Key == "ArrowDown" && focusedCell.rowIdx < tableData.tableBody.Count - 1) focusedCell.rowIdx++;
            else if (e.Key == "ArrowLeft" && focusedCell.columnIdx > 0) focusedCell.columnIdx--;
            else if (e.Key == "ArrowRight" && focusedCell.columnIdx < GetHeaders().Count - 1) focusedCell.columnIdx++;
            else return;
        } 
        else
        {
            if (e.Key == "ArrowUp") focusedCell = (tableData.tableBody.Count - 1, 0);
            else if (e.Key == "ArrowDown" || e.Key == "ArrowRight") focusedCell = (0, 0);
            else if (e.Key == "ArrowLeft") focusedCell = (0, GetHeaders().Count - 1);
            else return;
        }
    }

    public List<string> GetHeaders()
    {
        List<string> result = new List<string>();

        foreach (TableHeaderClass header in tableData.tableHeader)
        {
            result.Add(header.value);
        }
        return result;
    }

    public void closeAllModals(bool doUpdate)
    {
        foreach (var header in tableData.tableHeader)
        {
            header.isDirectionModalOpen = false;
        }

        selectedCell = (-1, -1);

        if (doUpdate)
        {
            StateHasChanged();
        }
    }

    //TODO: Make isDirectionModal the only option
    public void handleModalChanges(int columnIdx = 0, string modalType = "isDirectionModalOpen", bool state = false)
    {
        closeAllModals(false);

        tableData.tableHeader[columnIdx].GetType().GetProperty(modalType).SetValue(tableData.tableHeader[columnIdx], state, null);
        StateHasChanged();
    }

    public void HandleTableBodyClick(int which, int rowIdx, int columnIdx)
    {
        focusedCell = (rowIdx, columnIdx);

        if (which == 2)
        {
            selectedCell = focusedCell;
        }

        StateHasChanged();
    }


    public void addNewColumn(int columnIdx, string type)
    {
        closeAllModals(true);

        Random rand = new Random();
        int randomNumber = rand.Next();
        string propName = "_" + randomNumber.ToString();

        TableHeaderClass newHeader = new TableHeaderClass();
        newHeader.type = type;
        newHeader.value = propName;
        tableData.tableHeader.Insert(columnIdx, newHeader);

        foreach (var item in tableData.tableBody)
        {
            item[propName] = "";
        }
    }

    public void addNewRow(int rowIdx)
    {

        var rand = new Random();
        var newRow = new Dictionary<string, dynamic>();

        foreach (var header in tableData.tableHeader)
        {

            newRow["id"] = rand.Next();
            switch (header.type)
            {
                case "text":
                    newRow[header.value] = "_";
                    break;
                case "checkbox":
                    newRow[header.value] = false;
                    break;
                case "date":
                    newRow[header.value] = (long)DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
                    break;
                case "number":
                    newRow[header.value] = -1;
                    break;
                default:
                    newRow[header.value] = null;
                    break;
            }
        }

        tableData.tableBody.Insert(rowIdx, newRow);
        StateHasChanged();
    }
}
}


