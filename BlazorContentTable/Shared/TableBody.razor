<tbody>
    @for (int rowIdx = 0; rowIdx < TableBodyData.Count; rowIdx++)
    {
        var row = TableBodyData[rowIdx];
        <tr>
            @foreach (var header in headers)
@*            @for (int columnIdx = 0; columnIdx < headers.Count; columnIdx++)*@

            {
 @*               var header = headers[columnIdx];*@
                @if (row.ContainsKey(header))
                {
                    <TableCell innerText="@row[header]"
                   cellIdx="rowIdx"
                   cellHeader="@header"
                   HandleTableBodyClick="(which, idx, header) => HandleTableBodyClick.Invoke(which, idx, header)"
                   isModalOpen='isState("open", idx, header)'
                   isFocusedCell='isState("focused", idx, header)'
                   addNewRow="(idx) => addNewRow.Invoke(idx)" />
                }
                else
                {
                    <TableCell />
                }

            }
        </tr>
    }
    <tr>
        @foreach (var header in headers.Select((item, idx) => new { item, idx }))
        {
            @if (header.idx == 0)
            {
                <td @onclick="() => addNewRow.Invoke(TableBodyData.Count)">
                    <AppSvgs type="plus" />
                </td>
            }
            else
            {
                <td></td>
            }
        }
    </tr>
</tbody>

@code {

    [Parameter]
    public List<Dictionary<string, dynamic>> TableBodyData { get; set; }

    [Parameter]
    public List<string> headers { get; set; }

    [Parameter]
    public (int idx, string header) selectedCell { get; set; }

    [Parameter]
    public (int idx, string header) focusedCell { get; set; }

    [Parameter]
    public Action<int, int, string> HandleTableBodyClick { get; set; }

    [Parameter]
    public Action<int> addNewRow { get; set; }

    public bool isState(string checkedState, int idx, string header)
    {
        if (checkedState == "open") return (selectedCell.idx == idx && selectedCell.header == header);
        if (checkedState == "focused") return (focusedCell.idx == idx && focusedCell.header == header);
        return false;
    }

    public bool isFocused(int idx, string header)
    {
        return (selectedCell.idx == idx && selectedCell.header == header);
    }
}
