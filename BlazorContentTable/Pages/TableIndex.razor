@page "/"
<PageTitle>Index</PageTitle>

@inject HttpClient Http

@if (tableData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <main @onclick="(ev) => closeAllModals(true)" class="full">
        <AppHeader />
        <section class="table-wrapper">
            <table>
                @if (tableData != null)
                {
                    <TableHeader 
                        TableHeaderData="tableData.tableHeader"
                        handleModalChanges="(idx, modalType, state) => handleModalChanges(idx, modalType, state)" 
                        addNewColumn="(idx, type) => addNewColumn(idx, type)" 
                    />
                    <TableBody TableBodyData="tableData.tableBody" headers="GetHeaders()" />
                }
            </table>
            <div class="height-filler">
            </div>
        </section>
    </main>




    @code {

    static TableData tableData;
    public int selectedIdx = -1;



    protected override async Task OnInitializedAsync()
    {
        tableData = await Http.GetFromJsonAsync<TableData>("sample-data/initalData.json");
        //Console.WriteLine(JsonConvert.SerializeObject(tableData, Formatting.Indented));
        //Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(tableData));
    }

    public List<string> GetHeaders()
    {
        List<string> result = new List<string>();

        foreach (TableHeaderClass header in tableData.tableHeader)
        {
            result.Add(header.value);
        }
        return result;
    }

    public void handleModalChanges(int idx = 0, string modalType = "isDirectionModalOpen", bool state = false)
    {
        closeAllModals(false);

        tableData.tableHeader[idx].GetType().GetProperty(modalType).SetValue(tableData.tableHeader[idx], state, null);
        StateHasChanged();
    }

    public void closeAllModals(bool doUpdate)
    {
        foreach (var header in tableData.tableHeader)
        {
            header.isDirectionModalOpen = false;
            header.isTypeModalOpen = false;
        }

        if (doUpdate)
        {
            StateHasChanged();
        }
    }

    public void addNewColumn(int idx, string type)
    {
        closeAllModals(true);

        selectedIdx = idx;

        Random rand = new Random();
        int randomNumber = rand.Next();
        string propName = "_" + randomNumber.ToString();

        TableHeaderClass newHeader = new TableHeaderClass();
        newHeader.type = type;
        newHeader.value = propName;
        newHeader.isTypeModalOpen = true;
        tableData.tableHeader.Insert(idx, newHeader);

        foreach (var item in tableData.tableBody)
        { 
            item[propName] = "";
        }
    }
}
}


