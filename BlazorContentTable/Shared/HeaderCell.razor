<th 
    class="@GetTHClass()" 
    @onmousedown="(ev) => onHandleMouseDown(ev, columnIdx)"
    oncontextmenu="return false;"
>
    <div class="cell-wrapper">
        <AppSvgs type="@headerData.type" />
        @if (headerData.value.StartsWith("_"))
        {
            <input disabled="@(!isEdited)" type="text" value="" @onchange='(ev) => dataChanged(ev)' @ref="inputElement">
            @*<input type="text" value="" @onchange='(ev) => dataChanged(ev)' @ref="inputElement">*@
        }
        else
        {
            @*<span>@headerData.value</span>*@
            <input disabled="@(!isEdited)"  type="text" value="@headerData.value" @onchange='(ev) => dataChanged(ev)' @ref="inputElement">
        }

    </div>
    @if (isModalOpen)
    {
        <section class="cell-modal" style="top: @topPos; left: @leftPos">
            <span class="@($"{(isStickTop ? "selected" : "")}")"
              @onmouseenter='() => { isStickTop = true; isSideModalOpen = true; }'
              @onmouseleave='() => isSideModalOpen = false'>
                Add Left Column
            </span>

            <span class="@($"{(isStickTop ? "" : "selected")}")"
              @onmouseenter='() => { isStickTop = false; isSideModalOpen = true; }'
              @onmouseleave='() => isSideModalOpen = false'>
                Add Right Column

            </span>

            <section class="@($"{(isStickTop ? "stick-top" : "stick-bottom")} {(isSideModalOpen ? "open" : "closed")} cell-modal side-modal")">
                @foreach (var column in new List<string> { "text", "checkbox", "date", "number" })
                {
                    <span class="add-column-action" @onclick='() => addColumn(column)' @onclick:stopPropagation="true">
                        <span>@column</span>
                        <AppSvgs type="@column" />
                    </span>
                }
            </section>
        </section>

    }

</th>

@code {
    private ElementReference inputElement;

    string topPos = "0px";
    string leftPos = "0px";

    private bool isStickTop { get; set; } = false;
    private bool isSideModalOpen { get; set; } = false;

    [Parameter] public Action<int, string, bool> handleModalChanges { get; set; }
    [Parameter] public Action<int, string> addNewColumn { get; set; }
    [Parameter] public Action<int, int, int> HandleMouseDown { get; set; }
    [Parameter] public Action<string, int, dynamic> onDataChanged { get; set; }

    [Parameter] public bool isModalOpen { get; set; }
    [Parameter] public bool isFocused { get; set; }
    [Parameter] public bool isEdited { get; set; }

    [Parameter] public TableHeaderClass headerData { get; set; }
    [Parameter] public int columnIdx { get; set; }




    public void onHandleMouseDown(MouseEventArgs e, int columnIdx)
    {
        if (e.Button == 2)
        {
            topPos = $"{e.OffsetY}px";
            leftPos = $"{e.OffsetX}px";
            HandleMouseDown.Invoke(2, -100, columnIdx);
        } 
        else if (e.Button == 0)
        {
            if (!isModalOpen) HandleMouseDown.Invoke(0, -100, columnIdx);
        }
    }

    protected override void OnParametersSet()
    {
        if (isEdited) setFocus();
    }

    private async Task setFocus()
    {
        await inputElement.FocusAsync();

    }

    public void dataChanged(ChangeEventArgs e)
    {
        onDataChanged.Invoke("header", columnIdx, e.Value);
    }

    public void addColumn(string type)
    {
        int newCoulmnIdx = (isStickTop) ? columnIdx : columnIdx + 1;
        addNewColumn.Invoke(newCoulmnIdx, type);
    }

    string GetTHClass()
    {
        string thClass = "header-cell";
        if (isModalOpen) thClass += " selected";
        if (isFocused) thClass += " focused";
        if (isEdited) thClass += " edited";

        return thClass;
    }

}
